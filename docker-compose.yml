version: "3.8"

services:

# Databases postgres
  postgres_enigmi:
    restart: always
    image: postgres
    ports:
      - "5432:5432"
    volumes:
      - "./enigmi_data:/var/lib/postgresql/data"
    container_name : postgres_enigmi
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=db_enigmi

  postgres_connessioni:
    restart: always
    image: postgres
    ports:
      - "5433:5432"
    volumes:
      - "./connessioni_data:/var/lib/postgresql/data"
    container_name : postgres_connessioni
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=db_connessioni

  postgres_enigmiSeguiti:
    restart: always
    image: postgres
    ports:
      - "5434:5432"
    volumes:
      - "./enigmiSeguiti_data:/var/lib/postgresql/data"
    container_name : postgres_enigmiSeguiti
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=db_enigmiSeguiti

  pgadmin:
    container_name: pgadmin4_container
    image: dpage/pgadmin4
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: postgres@admin.com
      PGADMIN_DEFAULT_PASSWORD: postgres
    ports:
      - "5050:80"
    volumes:
     - "pgadmin-data:/var/lib/pgadmin"

# Consul
  consul:
    restart: on-failure
    image: consul:latest
    container_name: asw-consul
    ports:
      - "8500:8500"
      
# Kafka
  zookeeper:
    restart: on-failure
    image: docker.io/bitnami/zookeeper:3.8
    container_name: asw-zookeeper
    ports:
      - "2181:2181"
    volumes:
      - "zookeeper_data:/bitnami"
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
      
  kafka:
    restart: on-failure
    image: docker.io/bitnami/kafka:3.2
    container_name: asw-kafka
    ports:
      - "9092:9092"
    volumes:
      - "kafka_data:/bitnami"
    environment:
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - zookeeper

# Servizi
  connessioni:
    restart: on-failure
    build: 
      context: connessioni
      dockerfile: dockerfile
    deploy:
      replicas: 2
    depends_on:
      - consul
      - kafka
      - postgres_connessioni
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_connessioni:5432/db_connessioni
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      
  enigmi:
    restart: on-failure
    build: 
      context: enigmi
      dockerfile: dockerfile
    deploy:
      replicas: 2
    depends_on:
      - consul
      - kafka
      - postgres_enigmi
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_enigmi:5432/db_enigmi
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      
  enigmi-seguiti:
    restart: on-failure
    build: 
      context: enigmi-seguiti
      dockerfile: dockerfile
    deploy:
      replicas: 2
    depends_on:
      - consul
      - kafka
      - db_enigmiSeguiti
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres_enigmiSeguiti:5432/db_enigmiSeguiti
      - SPRING_DATASOURCE_USERNAME=postgres
      - SPRING_DATASOURCE_PASSWORD=postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
      
  api-gateway:
    restart: on-failure
    build: 
      context: api-gateway
      dockerfile: dockerfile
    container_name: asw-api-gateway
    ports:
      - "8080:8080"
    depends_on:
      - consul
      - kafka

# Volumi
volumes:
  zookeeper_data:
    driver: local
  kafka_data:
    driver: local
  pgadmin-data:
    driver: local
